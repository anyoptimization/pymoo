#!/usr/bin/env bash

# PyMoo Test Runner
# This script runs pytest with appropriate configurations for PyMoo unit tests

# Function to display usage information
usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS] [TEST_PATH]

Run pymoo unit tests using pytest.

Arguments:
  TEST_PATH    Optional path to specific test file or directory
               (default: tests/)

Options:
  -h, --help   Show this help message and exit
  -v           Extra verbose output (passed to pytest)
  -q, --quiet  Quiet output (disable default verbose mode)
  -k EXPR      Only run tests matching the expression (passed to pytest)
  -m MARKER    Only run tests with the given marker (passed to pytest)
  -x           Stop on first failure (passed to pytest)
  --all        Include long running tests (by default they are filtered out)
  --no-header  Skip the header output

Examples:
  $(basename "$0")                      # Run all tests (excluding long ones)
  $(basename "$0") --all                # Run all tests including long ones
  $(basename "$0") tests/algorithms     # Run only algorithm tests
  $(basename "$0") tests/test_util.py   # Run specific test file
  $(basename "$0") -k "nsga2"           # Run tests matching "nsga2"
  $(basename "$0") -m "long"            # Run tests marked as "long"
  $(basename "$0") -v -x                # Verbose output, stop on first failure

EOF
}

# Default values
TEST_PATH=""
PYTEST_ARGS=()
SHOW_HEADER=true
INCLUDE_LONG=false
QUIET_MODE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        --no-header)
            SHOW_HEADER=false
            shift
            ;;
        --all)
            INCLUDE_LONG=true
            shift
            ;;
        -v|-k|-m|-x|--tb|--maxfail|--lf|--ff|-q|--quiet)
            # Pass these arguments directly to pytest
            if [[ "$1" == "-k" || "$1" == "-m" || "$1" == "--maxfail" || "$1" == "--tb" ]]; then
                PYTEST_ARGS+=("$1" "$2")
                shift 2
            elif [[ "$1" == "-q" || "$1" == "--quiet" ]]; then
                QUIET_MODE=true
                shift
            else
                PYTEST_ARGS+=("$1")
                shift
            fi
            ;;
        *)
            # Assume it's the test path
            TEST_PATH="$1"
            shift
            ;;
    esac
done

# Change to the project root directory
cd "$(dirname "$0")/.." || exit 1

# Set default test path if not provided
if [ -z "$TEST_PATH" ]; then
    TEST_PATH="tests/"
fi

# Validate test path
if [ ! -e "$TEST_PATH" ]; then
    echo "Error: Test path '$TEST_PATH' does not exist."
    echo "Run '$(basename "$0") --help' for usage information."
    exit 1
fi

# Add marker to exclude long tests by default
if [ "$INCLUDE_LONG" = false ]; then
    PYTEST_ARGS+=("-m" "not long")
fi

# Show header if enabled
if [ "$SHOW_HEADER" = true ]; then
    echo "Running PyMoo unit tests..."
    echo "Test path: $TEST_PATH"
    if [ "$INCLUDE_LONG" = true ]; then
        echo "Including long running tests"
    else
        echo "Excluding long running tests (use --all to include them)"
    fi
    if [ ${#PYTEST_ARGS[@]} -gt 0 ]; then
        echo "Additional pytest args: ${PYTEST_ARGS[*]}"
    fi
    echo "=========================="
fi

# Run pytest with the specified arguments
if [ "$QUIET_MODE" = true ]; then
    python -m pytest "$TEST_PATH" "${PYTEST_ARGS[@]}"
else
    python -m pytest -v "$TEST_PATH" "${PYTEST_ARGS[@]}"
fi

# Capture the exit code
exit_code=$?

# Print summary if header was shown
if [ "$SHOW_HEADER" = true ]; then
    echo "=========================="
    if [ $exit_code -eq 0 ]; then
        echo "All tests passed!"
    else
        echo "Some tests failed. Exit code: $exit_code"
    fi
fi

exit $exit_code